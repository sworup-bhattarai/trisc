// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2021 18:50:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          triscCPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module triscCPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ClearAddGen;
reg ClockIn;
reg [7:0] DataIn;
reg Mode;
reg RW;
reg Reset;
reg SysClock;
// wires                                               
wire [0:14] C;
wire [6:0] MAR;
wire [14:0] MDIout;
wire [14:0] MDOout;
wire [6:0] PC;

// assign statements (if any)                          
triscCPU i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.ClearAddGen(ClearAddGen),
	.ClockIn(ClockIn),
	.DataIn(DataIn),
	.MAR(MAR),
	.MDIout(MDIout),
	.MDOout(MDOout),
	.Mode(Mode),
	.PC(PC),
	.RW(RW),
	.Reset(Reset),
	.SysClock(SysClock)
);
initial 
begin 
#1000000 $finish;
end 

// ClearAddGen
initial
begin
	ClearAddGen = 1'b0;
end 

// ClockIn
initial
begin
	ClockIn = 1'b0;
	ClockIn = #25000 1'b1;
	# 5000;
	repeat(4)
	begin
		ClockIn = 1'b0;
		ClockIn = #5000 1'b1;
		# 5000;
	end
	ClockIn = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
	DataIn[6] = #50000 1'b1;
	DataIn[6] = #20000 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
	DataIn[5] = #50000 1'b1;
	DataIn[5] = #20000 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
	DataIn[3] = #20000 1'b1;
	DataIn[3] = #20000 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
	DataIn[2] = #20000 1'b1;
	DataIn[2] = #20000 1'b0;
	DataIn[2] = #10000 1'b1;
	DataIn[2] = #20000 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
	DataIn[1] = #20000 1'b1;
	DataIn[1] = #20000 1'b0;
	DataIn[1] = #10000 1'b1;
	DataIn[1] = #20000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
	DataIn[0] = #20000 1'b1;
	DataIn[0] = #20000 1'b0;
end 

// Mode
initial
begin
	Mode = 1'b0;
	Mode = #20000 1'b1;
	Mode = #60000 1'b0;
end 

// RW
initial
begin
	RW = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #90000 1'b1;
	Reset = #900000 1'b0;
end 

// SysClock
initial
begin
	SysClock = 1'b0;
	SysClock = #95000 1'b1;
	# 5000;
	repeat(29)
	begin
		SysClock = 1'b0;
		SysClock = #5000 1'b1;
		# 5000;
	end
	SysClock = 1'b0;
	SysClock = #5000 1'b1;
	# 5000;
	repeat(58)
	begin
		SysClock = 1'b0;
		SysClock = #5000 1'b1;
		# 5000;
	end
	SysClock = 1'b0;
end 
endmodule

